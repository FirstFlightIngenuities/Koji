<!DOCTYPE html>
<html style="height:100%; overflow-x: hidden;">
<title></title>
<head>
</head>
<body style="width:100%;height:100%; padding: 0; margin: 0; overflow-x: hidden; background-color: #f3f6f9; font-family: 'Trebuchet MS', helvetica, tahoma;" onload="checkForImportantMessage();setTimeout(function() {showMenu(document.getElementById('menuDiv')) },500);">

<h1 id="KOJITitle" style="width:100%; padding:0.1em;text-align: center;background-color: #3ecf8e; background: -moz-linear-gradient(#5eefae,#3ecf8e); background: -webkit-linear-gradient(#5eefae,#3ecf8e);background: -o-linear-gradient(#5eefae,#3ecf8e); background: linear-gradient(#5eefae,#3ecf8e); font-size:4em; margin-top: 0; color:white; box-shadow: 6px 6px 6px #aaaaaa; margin-bottom: 10px; padding-bottom: 0; z-index:5">KO<span style="color:#3e8ecf">J</span><span style="color:#8e3ecf">I</span></h1>

<div id="importantMessageDiv" style="position:absolute; top: 0%; left: 5%; width: 90%; height: 0; background-color: white; z-index:20; box-shadow: -3px 6px 16px #aaaaaa; margin-top: -2em; opacity: 0; border-radius: 0.5em; -moz-transition: margin-top 1s, opacity 1s; -webkit-transition: margin-top 1s, opacity 1s; -o-transition: margin-top 1s, opacity 1s; transition: margin-top 1s, opacity 1s; overflow: hidden;">
		<div style="position: absolute; width: 15em; height: 10em; left: 100%; margin-left: -15em; z-index: 21"  onclick="closeMenu(document.getElementById('importantMessageDiv'))"></div>
		<div style="width: 100%; height: 6em; text-align: right; color: red; font-size: 6em; margin-top: 0"><p style="margin-top: 0; padding-right: 0.5em" onclick="closeMenu(document.getElementById('importantMessageDiv'))">X</p></div>
		<div style="display: block;width: 100%; text-align:center; overflow: hidden;"><p id="importantMessageSpan" style="font-size: 2em; text-align: center;"></p>
		</div>
</div>

<div id="root" style="position:relative;width:100%;height:80%; text-align: center; margin: 0 auto 0 auto; padding: 0px;">
	
	<div id="menuDiv" style="position:absolute; top: 0%; left: 5%; width: 90%; height: 0; background-color: white; z-index:5; box-shadow: -3px 6px 16px #aaaaaa; margin-top: -2em; opacity: 0; border-radius: 0.5em; -moz-transition: margin-top 1s, opacity 1s; -webkit-transition: margin-top 1s, opacity 1s; -o-transition: margin-top 1s, opacity 1s; transition: margin-top 1s, opacity 1s; overflow: hidden;">
		<div style="position: absolute; width: 15em; height: 10em; left: 100%; margin-left: -15em; z-index: 6"  onclick="closeMenu(document.getElementById('menuDiv'))"></div>
		<div style="width: 100%; height: 10%; text-align: center; color: white; font-size: 2.5em; margin-top: 0; background-color: #3ecf8e; background: -moz-linear-gradient(#3eef8e,#3ecf8e); background: -webkit-linear-gradient(#3eef8e,#3ecf8e);background: -o-linear-gradient(#3eef8e,#3ecf8e); background: linear-gradient(#3eef8e,#3ecf8e);"><p style="display: inline-block; margin: 0.25em 0 0 0; padding: 0.2em">Menu</p><p style="margin: 0.25em 0 0 0; padding: 0.2em 0.5em 0.2em 0; float: right; cursor: default;" onclick="closeMenu(document.getElementById('menuDiv'))">X</p></div>
		<ul style="width: 100%; height: 80%;list-style: none; font-size: 2em; color: #3ecf8e; margin: 0.5em 0 0 0; padding: 0">
			<li id="instructionsChoice" style="width:100%; height: 22%; overflow: hidden; border-bottom: 1px solid #cccccc; padding: 0.2em 0.5em 0.2em 0.5em; margin: 0;list-style: none; background-color: #f3f6f9; background: -moz-linear-gradient(left, #ffffff, #e6e9ec); background: -webkit-linear-gradient(left, #ffffff, #e6e9ec); background: -o-linear-gradient(left, #ffffff, #e6e9ec); background: linear-gradient(to right, #ffffff, #e6e9ec);" onclick="closeMenu(document.getElementById('menuDiv'));showMenu(document.getElementById('instructionsDiv'));">
				<svg xmlns="http://www.w3.org/2000/svg" style="width: 20%; height: 100%;float: left;padding-left:1em;" viewbox="0 0 25 25"><circle cx="12" cy="12" r="12" fill="#d6facf"/><path d="M14.23 12.24A3.3 3.3 0 0 0 16 9.36C16 8.2 15.15 6 12.1 6A3.806 3.806 0 0 0 8 10h2.36c0-1.45.82-2.06 1.67-2.06a1.184 1.184 0 0 1 1.37 1.3c0 .96-.15 1.14-1.03 1.82A3.365 3.365 0 0 0 10.8 14H13a2.526 2.526 0 0 1 1.23-1.76zM12 18.5a1.5 1.5 0 1 0-1.5-1.5 1.5 1.5 0 0 0 1.5 1.5z" fill="#3ecf8e"/></svg>
				<p style="width: 25%; height: 100%;float: left;padding-left:1em; text-align: left; margin-top:1.5em;">How To Play</p>
				<p style="width: 40%; height: 100%;float: left;padding-left:0.5em; text-align: left; font-size: 0.80em; color: #8e3ecf;">Instructions on how to play this <span style="font-style: italic; font-weight: bold;">fun</span> color matching game that keeps you <span style="font-style: italic; font-weight: bold;">constantly entertained.</span></p>
			</li>
			<li id="signupChoice" style="width:100%; height: 22%; overflow: hidden; border-bottom: 1px solid #cccccc; padding: 0.2em 0.5em 0.2em 0.5em; margin: 0;list-style: none; background-color: #f3f6f9; background: -moz-linear-gradient(left, #e6e9ec, #ffffff); background: -webkit-linear-gradient(left, #e6e9ec, #ffffff); background: -o-linear-gradient(left, #e6e9ec, #ffffff); background: linear-gradient(to right, #e6e9ec, #ffffff);" onclick="closeMenu(document.getElementById('menuDiv'));showMenu(document.getElementById('signupDiv'));">
				<svg xmlns="http://www.w3.org/2000/svg" style="width: 20%; height: 100%; float: left;padding-left:1em;" viewbox="0 0 50 50"><g><path fill="#3ecf8e" d="M31.81 31H11a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h25a1 1 0 0 0 1-1v-1.806l5-2.446V39a3 3 0 0 1-3 3H8a3 3 0 0 1-3-3V8a3 3 0 0 1 3-3h31a3 3 0 0 1 3 3v14.767L31.81 31zM10 25a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1H11a1 1 0 0 0-1 1v3zm27-13a1 1 0 0 0-1-1H11a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h25a1 1 0 0 0 1-1v-3zm0 10a1 1 0 0 0-1-1H26a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1v-3z"></path><path fill="#3e8ecf" d="M34.956 32.365L46.1 21.205a3.06 3.06 0 0 0 0-4.318 3.043 3.043 0 0 0-4.31 0l-11.143 11.16a2.445 2.445 0 0 0-.64 1.133l-.98 3.925a.728.728 0 0 0 .88.884l3.918-.984a2.4 2.4 0 0 0 1.13-.642z"></path></g></svg>
				<p style="width: 25%; height: 100%;float: left;padding-left:1em; text-align: left; margin-top:1.5em;">Sign Up</p>
				<p style="width: 40%; height: 100%;float: left;padding-left:0.5em; text-align: left; font-size: 0.80em; color: #8e3ecf;">Get the benefits of more challenges, recording of your high scores, and access to the upcoming multi-player version.</p>
			</li>
			<li id="signinChoice" style="width:100%; height: 22%; overflow: hidden; border-bottom: 1px solid #cccccc; padding: 0.2em 0.5em 0.2em 0.5em; margin: 0;list-style: none; background-color: #f3f6f9; background: -moz-linear-gradient(left, #ffffff, #e6e9ec); background: -webkit-linear-gradient(left, #ffffff, #e6e9ec); background: -o-linear-gradient(left, #ffffff, #e6e9ec); background: linear-gradient(to right, #ffffff, #e6e9ec);" onclick="closeMenu(document.getElementById('menuDiv'));showMenu(document.getElementById('signinDiv'));">
				<svg xmlns="http://www.w3.org/2000/svg" style="width: 20%; height: 100%; float: left;padding-left:1em;" viewbox="0 0 50 50"><path fill="#1eaf6e" d="m 31.006,20 v -6.76 c -0.04746,-4.1119342 -3.394295,-7.4203555 -7.5065,-7.4203555 -4.112205,0 -7.459039,3.3084213 -7.5065,7.4203555 V 16 H 11 V 13.5 C 11,6.597 16.596,1 23.5,1 30.404,1 36,6.597 36,13.5 V 20 Z"></path><path fill="#3ecf8e" d="M20 30c0 1.48.805 2.77 2 3.46V37a2 2 0 0 0 2 2v6H10a4 4 0 0 1-4-4V24a4 4 0 0 1 4-4h14v6a4 4 0 0 0-4 4z"></path><path fill="#1eaf6e" d="M37 45H24v-6a2 2 0 0 0 2-2v-3.54A3.99 3.99 0 0 0 28 30a4 4 0 0 0-4-4v-6h13a4 4 0 0 1 4 4v17a4 4 0 0 1-4 4z"></path></svg>
				<p style="width: 25%; height: 100%;float: left;padding-left:1em; text-align: left; margin-top:1.5em;">Sign In</p>
				<p style="width: 40%; height: 100%;float: left;padding-left:0.5em; text-align: left; font-size: 0.80em; color: #8e3ecf;">View your high score history or cancel your membership. Thank you for signing-up and enjoy!</p>
			</li>
			<li style="width: 100%; text-align:center; background-color: white;"><button id="newGameButton" style="background-color: #3ecf8e; background: -moz-linear-gradient(#3eef8e,#3ecf8e); background: -webkit-linear-gradient(#3eef8e,#3ecf8e);background: -o-linear-gradient(#3eef8e,#3ecf8e); background: linear-gradient(#3eef8e,#3ecf8e); color: white; border-radius: 0.5em; box-shadow: -2px 4px 8px #aaaaaa; border: none; font-size:1.5em;padding:.5em; margin-top: 0.2em;" onclick="setupNewGame()">New Game</button>
			</li>
		</ul>
		<div style="width: 100%; height: 10%; background-color:#3ecf8e; background: -moz-linear-gradient(#5eefae,#3ecf8e); background: -webkit-linear-gradient(#5eefae,#3ecf8e); background: -o-linear-gradient(#5eefae,#3ecf8e); background: linear-gradient(#5eefae,#3ecf8e);"></div>
	</div>

	<div id="gameMessageDiv" style="position:absolute; top: 0%; left: 5%; width: 90%; height: 0; background-color: white; z-index:5; box-shadow: -3px 6px 16px #aaaaaa; margin-top: -2em; opacity: 0; border-radius: 0.5em; -moz-transition: margin-top 1s, opacity 1s; -webkit-transition: margin-top 1s, opacity 1s; -o-transition: margin-top 1s, opacity 1s; transition: margin-top 1s, opacity 1s; overflow: hidden;">
		<div style="position: absolute; width: 15em; height: 10em; left: 100%; margin-left: -15em; z-index: 6"  onclick="closeMenu(document.getElementById('gameMessageDiv'))"></div>
		<div style="width: 100%; height: 6em; text-align: right; color: gray; font-size: 4em; margin-top: 0"><p style="margin-top: 0; padding-right: 0.5em" onclick="closeMenu(document.getElementById('gameMessageDiv'))">X</p></div>
		<div style="display: block;width: 100%; text-align:center; overflow: hidden;"><h2 id="gameMessage" style="font-size: 4em; text-align: center;"></h2>
		</div>
	</div>

	<div id="instructionsDiv" style="position:absolute; top: 0%; left: 5%; width: 90%; height: 0; background-color: white; z-index:5; box-shadow: -3px 6px 16px #aaaaaa; margin-top: -2em; opacity: 0; border-radius: 0.5em; -moz-transition: margin-top 1s, opacity 1s; -webkit-transition: margin-top 1s, opacity 1s; -o-transition: margin-top 1s, opacity 1s; transition: margin-top 1s, opacity 1s; overflow: hidden;">
		<div style="position: absolute; width: 15em; height: 10em; left: 0%; z-index: 6"  onclick="closeMenu(document.getElementById('instructionsDiv')); showMenu(document.getElementById('menuDiv'));"></div>
		<div style="position: absolute; width: 15em; height: 10em; left: 100%; margin-left: -15em; z-index: 6"  onclick="closeMenu(document.getElementById('instructionsDiv'))"></div>
		<div style="width: 100%; height: 10%; text-align: center; color: white; font-size: 2.5em; margin-top: 0; background-color:#8e3ecf; background: -moz-linear-gradient(#ae6eef,#8e3ecf); background: -webkit-linear-gradient(#ae6eef,#8e3ecf); background: -o-linear-gradient(#ae6eef,#8e3ecf); background: linear-gradient(#ae6eef,#8e3ecf);"><p style="margin: -0.60em -2.5em 0 -0.40em; padding: 0.2em 0 0.2em 0.5em; font-size:2.5em; overflow: hidden; float: left; cursor: default;" onclick="closeMenu(document.getElementById('instructionsDiv')); showMenu(document.getElementById('menuDiv'));">&larr;</p><p style="display: inline-block; margin: 0.25em 0 0 0; padding: 0.2em">How To Play</p><p style="margin: 0.25em 0 0 0; padding: 0.2em 0.5em 0.2em 0; float: right; cursor: default;" onclick="closeMenu(document.getElementById('instructionsDiv'))">X</p></div>
		<ul style="width: 100%; height: 80%; overflow-y: auto; list-style: none; font-size: 2em; color: #8E3ECF; padding: 0; text-align: left;">
			<li style="padding: 0.1em 3em 0.1em 3em;"><h4>The game concept is simple, but playing is fun and exciting. Your congitive deduction skills are challenged. The game is made up of two parts:</h4></li>
			<li style="padding: 0.1em 3em 0.1em 3em; margin: 0;"><p style="color: #8E3ECF; margin: 0;">Part 1: Determine if two random colors will mix to match your goal color.</p>
				<p style="color: gray; font-size: 0.9em;">A 'goal' color is displayed at the top of the screen. At the bottom, two random colors are displayed. If you think the random colors will mix to match the goal color, hit 'yes', if not, hit 'no'. That's it. Either incorrectly guess 'yes' or 'no' twice in a row and you'll get an X. Four X's and the game is over. Pay attention as the 'goal' color might change throughout the game.</p></li>
			<li style="padding: 0.1em 3em 0.1em 3em; margin: 0;"><p style="color: #8E3ECF; margin: 0;">Part 2: Behind the top 'goal' panel, there are hidden, twisted letters. Figure out the letters.</p>
				<p style="color: gray; font-size: 0.9em;">After every correct color mixing guess, a single line will appear in the 'goal' panel, revealing a portion of a hidden letter. Your goal is to determine the correct letters before too much of the letters are revealed. The less the letters are revealed, the higher number of points you earn when you guess the letters correctly. For every incorrect letter guess, you'll get an X. If you get a total of four X's, the game is over. Correctly selected letters will have a green border, incorrectly selected letters will have a red border.</p></li>
		</ul>
		<div style="width: 100%; height: 20%; background-color:#8e3ecf; background: -moz-linear-gradient(#ae6eef,#8e3ecf); background: -webkit-linear-gradient(#ae6eef,#8e3ecf); background: -o-linear-gradient(#ae6eef,#8e3ecf); background: linear-gradient(#ae6eef,#8e3ecf);"></div>
	</div>

	<div id="signupDiv" style="position:absolute; top: 0%; left: 5%; width: 90%; height: 0; background-color: white; z-index:5; box-shadow: -3px 6px 16px #aaaaaa; margin-top: -2em; opacity: 0; border-radius: 0.5em; -moz-transition: margin-top 1s, opacity 1s; -webkit-transition: margin-top 1s, opacity 1s; -o-transition: margin-top 1s, opacity 1s; transition: margin-top 1s, opacity 1s; overflow: hidden;">
		<div style="position: absolute; width: 15em; height: 10em; left: 0%; z-index: 6"  onclick="closeMenu(document.getElementById('signupDiv')); showMenu(document.getElementById('menuDiv'));"></div>
		<div style="position: absolute; width: 15em; height: 10em; left: 100%; margin-left: -15em; z-index: 6"  onclick="closeMenu(document.getElementById('signupDiv'))"></div>
		<div style="width: 100%; height: 10%; text-align: center; color: white; font-size: 2.5em; margin-top: 0; background-color:#8e3ecf; background: -moz-linear-gradient(#ae6eef,#8e3ecf); background: -webkit-linear-gradient(#ae6eef,#8e3ecf); background: -o-linear-gradient(#ae6eef,#8e3ecf); background: linear-gradient(#ae6eef,#8e3ecf);"><p style="margin: -0.60em -2.5em 0 -0.40em; padding: 0.2em 0 0.2em 0.5em; font-size:2.5em; overflow: hidden; float: left; cursor: default;" onclick="closeMenu(document.getElementById('signupDiv')); showMenu(document.getElementById('menuDiv'));">&larr;</p><p style="display: inline-block; margin: 0.25em 0 0 0; padding: 0.2em">Sign Up</p><p style="margin: 0.25em 0 0 0; padding: 0.2em 0.5em 0.2em 0; float: right; cursor: default;" onclick="closeMenu(document.getElementById('signupDiv'))">X</p></div>
		<ul style="width: 100%; height: 80%;list-style: none; font-size: 1.5em; color: #3ecf8e; margin: 2em 0 0 3em; padding: 0 0 0 1em; overflow-y: auto;">
			<li style="text-align: left;"><%= form_tag("/users", method: "post", id: "signupForm") do %>
				<p>Email and cell phone will be used for login and password recovery</p>
				<p>Email <span id="emailErrorMessage" style="color:red"></span></p>
				<p style="margin:-0.75em 0 0 0;"><input id="emailInput" type="text" name="email" placeholder="email" maxlength="70" style="width: 40%; font-size: 1em;" onkeyup="validateEmail(this)"><%= image_tag "greenCheck.png", :style => "width: 1.2em; height: 1.2em; margin-left: 1em; visibility: hidden;" %></p>
				<p >- and/or -</p>
				<p>Cellphone number <span id="cellNoErrorMessage" style="color:red"></span></p>
				<p style="margin:-0.75em 0 0 0;"><input id="cellInput" type="text" name="cell" placeholder="cellphone number" maxlength="20" style="width: 40%; font-size: 1em;" onkeyup="validateCellNo(this)" onfocus="validateCellNo(this)"><%= image_tag "greenCheck.png", :style => "width: 1.2em; height: 1.2em; margin-left: 1em; visibility: hidden;" %></p>
				<p>Display name <span id="displayNameErrorMessage" style="color:red"></span></p>
				<p style="margin:-0.75em 0 0 0;"><input id="displaynameInput" type="text" name="displayname" placeholder="display name" maxlength="70" style="width: 40%; font-size: 1em;" onkeyup="validateDisplayName(this)"><%= image_tag "greenCheck.png", :style => "width: 1.2em; height: 1.2em; margin-left: 1em; visibility: hidden;" %></p>
				<p>Password <span id="password1ErrorMessage" style="color:red"></span></p>
				<p style="margin:-0.75em 0 0 0;"><input id="password1Input" type="password" name="password1" placeholder="password" maxlength="70" style="width: 40%; font-size: 1em;" onkeyup="validatePassword(this)"><%= image_tag "greenCheck.png", :style => "width: 1.2em; height: 1.2em; margin-left: 1em; visibility: hidden;" %></p>
				<p>Re-enter password <span id="password2ErrorMessage" style="color:red"></span></p>
				<p style="margin:-0.75em 0 0 0;"><input id="password2Input" type="password" name="password2" placeholder="re-enter password" maxlength="70" style="width: 40%; font-size: 1em;" onkeyup="validatePassword(this)"><%= image_tag "greenCheck.png", :style => "width: 1.2em; height: 1.2em; margin-left: 1em; visibility: hidden;" %></p>
				<p></p>
				<p style="width: 40%; text-align: right;"><input id="signupSubmit" type="submit" name="signupSubmit" value="Sign up" style="background-color: #8e3ecf; border: none; color: white; font-size: 1.5em; padding:0.5em 1em 0.5em 1em; border-radius: 0.2em"></p>
			<% end %></li>
		</ul>
		<div style="width: 100%; height: 20%; background-color:#8e3ecf; background: -moz-linear-gradient(#ae6eef,#8e3ecf); background: -webkit-linear-gradient(#ae6eef,#8e3ecf); background: -o-linear-gradient(#ae6eef,#8e3ecf); background: linear-gradient(#ae6eef,#8e3ecf);"></div>
	</div>

	<div id="signinDiv" style="position:absolute; top: 0%; left: 5%; width: 90%; height: 0; background-color: white; z-index:5; box-shadow: -3px 6px 16px #aaaaaa; margin-top: -2em; opacity: 0; border-radius: 0.5em; -moz-transition: margin-top 1s, opacity 1s; -webkit-transition: margin-top 1s, opacity 1s; -o-transition: margin-top 1s, opacity 1s; transition: margin-top 1s, opacity 1s; overflow: hidden;">
		<div style="position: absolute; width: 15em; height: 10em; left: 0%; z-index: 6"  onclick="closeMenu(document.getElementById('signinDiv')); showMenu(document.getElementById('menuDiv'));"></div>
		<div style="position: absolute; width: 15em; height: 10em; left: 100%; margin-left: -15em; z-index: 6"  onclick="closeMenu(document.getElementById('signinDiv'))"></div>
		<div style="width: 100%; height: 10%; text-align: center; color: white; font-size: 2.5em; margin-top: 0; background-color:#8e3ecf; background: -moz-linear-gradient(#ae6eef,#8e3ecf); background: -webkit-linear-gradient(#ae6eef,#8e3ecf); background: -o-linear-gradient(#ae6eef,#8e3ecf); background: linear-gradient(#ae6eef,#8e3ecf);"><p style="margin: -0.60em -2.5em 0 -0.40em; padding: 0.2em 0 0.2em 0.5em; font-size:2.5em; overflow: hidden; float: left; cursor: default;" onclick="closeMenu(document.getElementById('signinDiv')); showMenu(document.getElementById('menuDiv'));">&larr;</p><p style="display: inline-block; margin: 0.25em 0 0 0; padding: 0.2em">Sign In</p><p style="margin: 0.25em 0 0 0; padding: 0.2em 0.5em 0.2em 0; float: right; cursor: default;" onclick="closeMenu(document.getElementById('signinDiv'))">X</p></div>
		<ul style="width: 100%; height: 80%;list-style: none; font-size: 2em; color: #3ecf8e; margin: 0; padding: 0">
			<li></li><li></li>
		</ul>
		<div style="width: 100%; height: 20%; background-color:#8e3ecf; background: -moz-linear-gradient(#ae6eef,#8e3ecf); background: -webkit-linear-gradient(#ae6eef,#8e3ecf); background: -o-linear-gradient(#ae6eef,#8e3ecf); background: linear-gradient(#ae6eef,#8e3ecf);"></div>
	</div>

	<div style="position: absolute; width: 15em; height: 10em; left: 100%; margin-left: -15em; z-index: 4"  onclick="closeMenu(document.getElementById('instructionsDiv')); closeMenu(document.getElementById('signupDiv')); closeMenu(document.getElementById('signinDiv')); showMenu(document.getElementById('menuDiv'));" onmouseover="animateMenu(document.getElementById('menuPara'), 0);" onmouseout="animateMenu(document.getElementById('menuPara'), 1);"></div>
	
	<div id="menuOptionContainer" style="position:relative;width:100%; height:3em; margin:auto; margin-top: 0; padding-top: 0; text-align: right; cursor: default;"><p id="menuPara" style="margin-top: 0; padding-top: 0;font-size: 2em; padding-right: 2em; padding-bottom: 3em; -moz-transition: background-color 1s, color 1s; -webkit-transition: background-color 1s, color 1s; -o-transition: background-color 1s, color 1s; transition: background-color 1s, color 1s; background-color: white; color: gray;"><span style="padding-right: 0; -moz-transition: padding-right 1s; -webkit-transition: padding-right 1s; -o-transition: padding-right 1s; transition: padding-right 1s;">m</span><span style="padding-right: 0; -moz-transition: padding-right 1s; -webkit-transition: padding-right 1s; -o-transition: padding-right 1s; transition: padding-right 1s;">e</span><span style="padding-right: 0; -moz-transition: padding-right 1s; -webkit-transition: padding-right 1s; -o-transition: padding-right 1s; transition: padding-right 1s;">n</span><span style="padding-right: 0; -moz-transition: padding-right 1s; -webkit-transition: padding-right 1s; -o-transition: padding-right 1s; transition: padding-right 1s;">u</span></p>
	</div><!--end menuOptionContainer div -->
	
	<div id="goalContainer" style="position:relative;width:100%; height:20%;overflow: hidden; margin:auto;">
		<div id="letterChoicesCont" style="position:absolute;width:100%;height:100%;top: 0; left: 0;background-color: white; display:none;text-align:center; z-index: 4"></div>
		<div id="timer" style="position:absolute; width:6em; padding:0.5em; background-color:ghostwhite; text-align:center; font-size:1.5em; margin-top:0; left: 50%; margin-left: -3em; color: gray; border-top: 1px solid gray; opacity:0.75; z-index: 3;">Goal Color</div>
		<canvas id="canvas1" style="position:absolute;width:100%;height:100%;top: 0; left: 0;display:none;text-align:center; z-index: 2"></canvas>
		<div id="overlayMessageContainer" style="position:relative;width:100%;height:100%;display:none;text-align:center; background-color:lightgray; opacity:0.75;"><p id="overlayMessageSpan" style="margin-top:3em;font-size:4em;"></p></div>
		<div id="goal" style="width:100%;height:100%; margin: 0 auto 0 auto; min-height: 100px;background-image: url('transparent_background.jpg'); z-index: 1"></div>
	</div><!--end goalContainer div -->

	<div id="pointsandxsContainer" style="position:relative;width:100%;overflow: hidden; margin: auto; text-align: center; white-space: nowrap; margin-top: 1em; color: gray;">
		<div style="display: inline-block;width: 100%; text-align:center; overflow: hidden;"><p id="xbox1" style="display: inline-block; width: 25%;font-size:2em;text-align: center"><span style="margin-left: 1em; margin-right: 1em;color: #8e3ecf">X</span><span style="margin-left: 1em; margin-right: 1em;color: #8e3ecf">X</span></p><strong style="display: inline-block;font-size:2em; border-bottom: 1px solid gray; width: 50%;">Points</strong><p id="xbox2" style="display: inline-block; width: 25%;font-size:2em;text-align: center"><span style="margin-left: 1em; margin-right: 1em;color: #8e3ecf">X</span><span style="margin-left: 1em; margin-right: 1em;color: #8e3ecf">X</span></p><p id="pointsSpan" style="margin-top: -0.5em;"></p></div>
	</div><!--end pointsandxsContainer div -->

	<div id="gameLettersContainer">
		<div style="width:50%; margin: auto; text-align:center; font-size: 2em; border-bottom: 1px solid gray; color: gray">Click on a spot below to choose or change a letter, click again to close 'letters' panel</div>
		<div id="gameLettersDiv" style="width:100%; margin: auto; text-align:center; color: gray"></div>
	</div><!--end gameLettersContainer div -->

	<div id="guessContainer" style="position:relative;width:100%; height:25%;overflow: hidden; margin:auto;">	
		<div id="guess" style="width:100%;height:100%; margin: auto; margin-top: 0; min-height: 100px; background-color: #eef0f6;background-image: url('transparent_background.jpg');text-align:left; white-space: nowrap; overflow: hidden; z-index: 1"></div>
	</div><!--end guessContainer div -->

</div><!--end root div -->

<div id="footer" style="width: 100%; height: 15%; background-color: #3ecf8e; background: -moz-linear-gradient(#5eefae,#3ecf8e); background: -webkit-linear-gradient(#5eefae,#3ecf8e);background: -o-linear-gradient(#5eefae,#3ecf8e); background: -ms-linear-gradient(#5eefae,#3ecf8e); background: linear-gradient(#5eefae,#3ecf8e); background: linear-gradient(#5eefae,#3ecf8e); padding: 0;"><p style="color: ghostwhite; font-size:1.5em; padding: 0.5em 3em 2em 3em; margin-top:0.5em;">a First Flight Ingenuities<span style="font-size: 1em">&trade;</span> production</p></div>

<input type="hidden" id="versionNo" name="versionNo" value="1.0">

<p style="position:absolute; top: -500px; height: 0; width: 0; margin: 0; padding: 0;"><input id="numberInput" type="number" name="none" style="height: 10; width: 10; margin: 0; padding: 0;" onkeyup="validateCellNo(document.getElementById('cellInput'))"></p>

</body>

<script>
	cycleTopDataAt = 0;
	cycleTopDataCounter = 0;
	gameOver = false;
	missedCorrect = 0;
	numXs = 0;
	points = 0;
	linesDrawnSoFar = {};
	numberOfLinesDrawnOnCanvas = 0;
	currentAnswerColor = 0;
	cycledThroughAnswerColors = false;
	numberNeededToWin = 2;
	numberCorrect = 0;
	divColors = {"div0" : "", "div1" :"", "answer" : ""};
	gameData = null;
	topData = null;
	selectedDiv = null;
	selectedUnderscore = null;
	selectedLetters = [];
	webWorker = null;
	startTime = null;
	lastTime = 0;
	intervalID = null;
	timeoutID = null;
	borderIntervalID = null;
	pointsIntervalID = null;
	showLettersTimeoutID = null;
	previousMinute = 0;
	xhttp = new XMLHttpRequest();
	counterU = 0;
	correctLetters = [];
	canvas = null, ctx = null;
	imageData = null;
	similarLettersLowerCase = {"a": "egqd", "b": "hdgopq", "c": "eouvhy", "d": "bpqgh", "e": "agqd", "f": "ktji", "g":"abdopq", "h":"bdkrv", "i":"ljt", "j":"ilt", "k":"bdepx", "l": "ijt", "m": "nwuv", "n": "muwv", "o":"bqpcd", "p": "bdgce", "q": "pbde", "r":"nuh", "s":"czg", "t": "ijlfk", "u": "vnyhc", "v": "unyc", "w": "mnhuv", "x": "kwmyz", "y": "zvukh", "z":"snum"};
	similarLettersUpperCase = {"A": "VYUH", "B": "KEPRFX", "C": "GOQD", "D": "CGOQ", "E": "KBPRFX", "F" : "KBEPRX", "G":"COQD", "H":"ITLJA", "I":"HTLJ", "J":"HITL", "K":"BEPRFX", "L":"HITJ", "M":"NWUHE", "N": "MWUHE", "O": "CGQD", "P": "KBERFX", "Q":"GCDO", "R": "KBEPFX", "S" : "ZCBE", "T": "HILJ", "U": "AVYH", "V" : "AYUN", "W" : "YMNE", "X" : "BEKZS", "Y":"VUNH", "Z" : "SNMUXK"};
	allLetters = {"a": 1, "b": 1, "c": 1, "d": 1, "e": 1, "f": "ktji", "g":"abdopq", "h":"bdkrv", "i":"ljt", "j":"ilt", "k":"bdepx", "l": "ijt", "m": "nwuv", "n": "muwv", "o":"bqpcd", "p": "bdgce", "q": "pbde", "r":"nuh", "s":"czg", "t": "ijlfk", "u": "vnyhc", "v": "unyc", "w": "mnhuv", "x": "kwmyz", "y": "zvukh", "z":"snum", "A": "VYUH", "B": "KEPRFX", "C": "GOQD", "D": "CGOQ", "E": "KBPRFX", "F" : "KBEPRX", "G":"COQD", "H":"ITLJA", "I": 1, "J": 1, "K": 1, "L": 1, "M": 1, "N": 1, "O": 1, "P": 1, "Q": 1, "R": 1, "S" : 1, "T": 1, "U": 1, "V" : 1, "W" : 1, "X" : 1, "Y": 1, "Z" : 1};

	function setupNewGame() {
		cycleTopDataAt = 0;
		cycleTopDataCounter = 0;
		gameOver = false;
		missedCorrect = 0;
		numXs = 0;
		points = 0;
		linesDrawnSoFar = {};
		numberOfLinesDrawnOnCanvas = 0;	
		currentAnswerColor = 0;
		cycledThroughAnswerColors = false;
		numberNeededToWin = 2;
		numberCorrect = 0;
		divColors = {"div0" : "", "div1" :"", "answer" : ""};
		gameData = null;
		topData = null;
		selectedDiv = null;
		selectedUnderscore = null;
		selectedLetters = [];
		if (!!webWorker) webWorker.terminate();
		webWorker = null;
		startTime = null;
		lastTime = 0;
		clearInterval(intervalID);
		intervalID = null;
		clearTimeout(timeoutID);
		timeoutID = null;
		clearInterval(borderIntervalID);
		borderIntervalID = null;
		clearInterval(pointsIntervalID);
		pointsIntervalID = null;
		clearTimeout(showLettersTimeoutID);
		showLettersTimeoutID = null;
		previousMinute = 0;
		xhttp.abort();
		xhttp = new XMLHttpRequest();
		counterU = 0;
		correctLetters = [];
		if (!!ctx) ctx.clearRect(0,0,canvas.width,canvas.height);
		canvas = null;
		ctx = null;
		imageData = null;
		document.getElementById("letterChoicesCont").style.display = "none";
		document.getElementById("pointsSpan").innerHTML = points;
		document.getElementById("gameMessage").innerHTML = "";
		var gameLD = document.getElementById("gameLettersDiv");
		while (gameLD.firstChild) gameLD.removeChild(gameLD.firstChild);
		gameLD.innerHTML = "";
		var box = document.getElementById("xbox1");
		var first = box.firstChild;
		while (first) {first.style.color = "#666666"; first.style.fontSize = "inherit"; first.style.fontWeight = "normal"; first.style.boxShadow = "none"; first = first.nextSibling;}
		box = document.getElementById("xbox2");
		first = box.firstChild;
		while (first) {first.style.color = "#666666"; first.style.fontSize = "inherit"; first.style.fontWeight = "normal"; first.style.boxShadow = "none"; first = first.nextSibling;}
		var goal = document.getElementById("goal");
		goal.innerHTML = "";
		goal.style.backgroundImage = "url('transparent_background.jpg')";
		var messageContainer = document.getElementById("overlayMessageContainer"); 
		var messageSpan = document.getElementById("overlayMessageSpan");
		messageSpan.innerHTML = "";
		messageContainer.style.display = "none";
		closeMenu(document.getElementById("menuDiv"));
		getGame();
		return true;
	}// end function setupNewGame()

	function getGame() {
		var csrfTok = document.querySelector("meta[name='csrf-token']").getAttribute("content");
		xhttp.open("POST", "/games");
		xhttp.setRequestHeader('X-CSRF-Token', csrfTok)
		xhttp.onreadystatechange = function() {
			if (this.readyState == 4 && this.status == 200) {
				topData = JSON.parse(this.responseText);
				console.log(topData);
				cycleTopDataAt = Math.floor(Math.random() * 15) + 15;
				gameData = topData[0];
				console.log("goal color is "+gameData.goalColor);
				colorGoalDiv();
				createColorDivs();
				createCanvasWithLetters();
				return true;
			} // end if
		} // end onreadystatechange
		xhttp.send();
		return true;
	} // end function getGame()

	function cycleThroughTopData() {
		var prev = gameData.goalColor;
		gameData = topData[Math.floor(Math.random() * topData.length)];
		cycleTopDataAt = Math.floor(Math.random() * 15) + 15;
		cycleTopDataCounter = 0;
		console.log("goal color is "+gameData.goalColor);
		colorGoalDiv();
		createColorDivs();
		changeColorOfSelectCanvasPixels(prev);
		return true;
	}

// color mixing functions ...

	function createColorDivs() {
		getColorsForHalfDivs();
		var frag = document.createDocumentFragment();
		for (var i = 0; i < 1; i++) {
			var divTempOuter = document.createElement('div');
			divTempOuter.style.display = "inline-block";
			divTempOuter.style.position = "relative";
			divTempOuter.style.height = "100%";
			divTempOuter.style.width = "100%";
			divTempOuter.style.margin = "0px";
			divTempOuter.style.padding = "0px";
			divTempOuter.style.borderTop = "1em solid "+gameData.goalColor;
			var divTempA = document.createElement("div");
			divTempA.style.position = "absolute";
			divTempA.style.width = "100%";
			divTempA.style.height = "100%";
			divTempA.style.top = "0px";
			divTempA.style.left = "0px"; 
			divTempA.id = "bkcolor:div"+i;
			divTempA.style.backgroundColor = divColors["answer"];
			divTempOuter.appendChild(divTempA);
			for (var j = 0; j < 2; j++) {
				var divTemp = createMixColorDivs();
				divTemp.style.backgroundColor = divColors["div"+j];
				divTempOuter.appendChild(divTemp);
			} // end (var j = 0; j < 2; j++)
			
			divTempOuter.style.display = "none";
			divTempOuter = attachYesNoButtons(divTempOuter);
			divTempOuter.style.display = "inline-block";
			frag.appendChild(divTempOuter);
		} // end for (var i = 0; i < 2; i++)
		guess.style.display = "none";
		while(!!guess.firstChild) guess.removeChild(guess.firstChild);
		guess.appendChild(frag);
		guess.style.display = "block";
		return true;
	} // end function createColorDivs()

	function getNextColors(par, did) {
		cycleTopDataCounter++;
		if (cycleTopDataCounter == cycleTopDataAt) cycleThroughTopData();
		else if (!gameOver) {
			createColorDivs();
		} // if (!gameOver)
		return true;
	} // end function getNextColors(par, did)
	
	
	function getColorsForHalfDivs() {
		var color1 = [], color2 = [], answer = [];
		var temp = gameData.goalColor;
		for (var i = 1; i < 6; i+=2) answer.push( parseInt(temp[i]+""+temp[i+1],16) )
		console.log(answer);
		var opt = Math.floor(Math.random() * 5);
		var opt2 = null;
		for (var i = 0; i < 3; i++) {
			if (answer[i] < 40)
				factor = 0;
			else if (answer[i] < 120)
				factor = 30 + Math.floor(Math.random() * (answer[i]-30));
			else if ((answer[i] >= 120) && (answer[i] <= 150))
				factor = 30 + Math.floor(Math.random() * 51);
			else if (answer[i] > 150)
				factor = 30 + Math.floor(Math.random() * (210-answer[i]));
			
			if (opt == 0) { 
				color1[i] = answer[i] - factor; 
				color2[i] = answer[i] + factor;
			} else if (opt == 1) {
				color1[i] = answer[i] + factor;
				color2[i] = answer[i] - factor;
			} else if ((opt == 2) || (opt == 3) || (opt == 4)) {
				var shift = 0;
				if (factor < 30)
					shift = 0;
				else if (factor < 70)
					shift = 25;
				else 
					shift = 30;

				if (opt2 == null) opt2 = Math.floor(Math.random() * 12);
				if (opt2 == 0) {
					color1[i] = answer[i] + (factor + shift);
					color2[i] = answer[i] - (factor - shift);
				} else if (opt2 == 1) {
					color1[i] = answer[i] + (factor + shift);
					color2[i] = answer[i] - (factor - shift);
				} else if (opt2 == 2) {
					color1[i] = answer[i] - (factor - shift);
					color2[i] = answer[i] + (factor + shift);
				} else if (opt2 == 3) {
					color1[i] = answer[i] - (factor + shift);
					color2[i] = answer[i] + (factor - shift);
				} else if ((opt2 == 4) || (opt2 == 5)) {
					color1[i] = answer[i] - (factor + shift);
					color2[i] = answer[i] + factor;
				} else if ((opt2 == 6) || (opt2 == 7)) {
					color1[i] = answer[i] - factor;
					color2[i] = answer[i] + (factor - shift);
				} else if ((opt2 == 8) || (opt2 == 9)) {
					color1[i] = answer[i] + (factor - shift);
					color2[i] = answer[i] - factor;
				} else if ((opt2 == 10) || (opt2 == 11)) {
					color1[i] = answer[i] + factor;
					color2[i] = answer[i] - (factor + shift);
				}
			
				if (color1[i] > 255) color1[i] = 255;
				else if (color1[i] < 0 ) color1[i] = 0;

				if (color2[i] > 255) color2[i] = 255;
				else if (color2[i] < 0 ) color2[i] = 0;
			} // else if ((opt == 2) || (opt == 3) || (opt == 4))

		} // for (var i = 0; i < 3; i++)
		hex1 = getHexFromRGB(color1);
		hex2 = getHexFromRGB(color2);
		if ((opt == 0) || (opt == 1)) {
			divColors["div0"] = hex1;
			divColors["div1"] = hex2;
			divColors["answer"] = gameData.goalColor;
		} else if ((opt == 2) || (opt == 3) || (opt == 4)) {
			divColors["div0"] = hex1;
			divColors["div1"] = hex2;
			divColors["answer"] = createInBetweenColor(color1,color2);
		}
		return true;
} // end function getColorsForHalfDivs()

	// this creates the mini-half divs that combine
	function createMixColorDivs() {
		var divTemp = document.createElement('div');
		divTemp.style.position = "relative";
		divTemp.style.width = "100%";
		divTemp.style.height = "50%";
		divTemp.style.display = "block";
		divTemp.style.margin = "0";
		divTemp.style.padding = "0";
		divTemp.style.opacity = "1";
		divTemp.style.MozTransition = "margin-top 0.5s, margin-bottom 0.5s, opacity 0.5s";
		divTemp.style.mozTransition = "margin-top 0.5s, margin-bottom 0.5s, opacity 0.5s";
		divTemp.style.WebkitTransition = "margin-top 0.5s, margin-bottom 0.5s, opacity 0.5s";
		divTemp.style.webkitTransition = "margin-top 0.5s, margin-bottom 0.5s, opacity 0.5s";
		divTemp.style.OTransition = "margin-top 0.5s, margin-bottom 0.5s, opacity 0.5s";
		divTemp.style.oTransition = "margin-top 0.5s, margin-bottom 0.5s, opacity 0.5s";
		divTemp.style.transition = "margin-top 0.5s, margin-bottom 0.5s, opacity 0.5s";
		return divTemp;
	} // end function createMixColorDivs()

	// this creates and attaches the buttons to the larger div
	function attachYesNoButtons(par) {
		var buttonDiv = document.createElement("div");
		buttonDiv.style.width = "100%";
		buttonDiv.style.height = "10em";
		buttonDiv.style.textAlign = "center";
		var button1 = createYesNoButton();
		button1.style.backgroundColor = "#0066ff";
		button1.style.background = "linear-gradient(#5eaeef,#3e8ecf)";
		button1.innerHTML = "Yes";
		button1.onclick = function() {showUnderneathBox(this,this.parentNode.parentNode, 0);}
		var button2 = createYesNoButton();
		button2.style.backgroundColor = "#993399";
		button2.style.background = "linear-gradient(#ae5eef,#8e3ecf)";
		button2.innerHTML = "No";
		button2.onclick = function() {showUnderneathBox(this,this.parentNode.parentNode, 1);}				
		buttonDiv.appendChild(button1);
		buttonDiv.appendChild(button2);
		par.appendChild(buttonDiv);
		buttonDiv.style.position = "absolute";
		buttonDiv.style.top = "50%";
		buttonDiv.style.marginTop = "-5em";
		var instruct = document.createElement("div");
		instruct.style.position = "absolute";
		instruct.style.fontSize = "1.5em";
		instruct.innerHTML = "Two colors below mix to match goal color?";
		instruct.style.width = "30em";
		instruct.style.top = "0em";
		instruct.style.left = "50%";
		instruct.style.marginLeft = "-15em";
		instruct.style.backgroundColor = "ghostwhite";
		instruct.style.color = "gray";
		instruct.style.opacity = "0.75";
		instruct.style.textAlign = "center";
		par.appendChild(instruct);
		return par;
	} // end function attachYesNoButtons(par)

	function createYesNoButton() {
		var button = document.createElement("button");
		button.style.width = "2.5em";
		button.style.height = "2.5em";
		button.style.fontSize = "3em";
		button.style.display = "inline-block";
		button.style.border = "none";
		button.style.borderRadius = "5px";
		button.style.textAlign = "center";
		button.style.color = "ghostwhite";
		button.style.marginRight = "2em";
		button.style.marginLeft = "2em";
		return button;
	} // end function createYesNoButton()

	function showUnderneathBox(but, par, opt) {
		but.style.display = "none";
		if (opt == 0) but.nextSibling.style.display = "none";
		else if (opt == 1) but.previousSibling.style.display = "none";
		cn = par.childNodes;
		cn[1].style.marginTop = "-50%";
		cn[1].style.marginBottom = "100%";
		cn[1].style.opacity = "0";
		cn[2].style.opacity = "0";
		var sendID = cn[0].id + "";
		if (divColors["answer"].toUpperCase() == gameData.goalColor.toUpperCase()) {
			var gotitPara = document.createElement("p");
			gotitPara.style.backgroundColor = "white";
			gotitPara.style.opacity = "0.5";
			gotitPara.style.color = "#3ecf8e";
			gotitPara.style.margin = "auto";
			if (opt == 0) {gotitPara.style.width = "6em"; gotitPara.style.height = "3em"; gotitPara.style.fontSize = "3em"; gotitPara.innerHTML = "You got it!"; gotitPara.style.marginTop = "1.5em"; gotitPara.style.paddingTop = "1em"; gotitPara.style.color = "gray"; missedCorrect = 0; animatePoints(15, 0); drawLine();setTimeout(function() {getNextColors(par, sendID);},800);}
			else if (opt == 1) {gotitPara.style.fontSize = "2em"; gotitPara.innerHTML = "This was it.<br/>You missed it.<br/>:("; gotitPara.style.width = "6em"; gotitPara.style.height = "6em"; gotitPara.style.padding = "2em"; gotitPara.style.marginTop = "1em"; gotitPara.style.color = "gray";animatePoints(-25, 1); missedCorrect++; if (missedCorrect == 2) {missedCorrect = 0; isGameLost();} setTimeout(function() {getNextColors(par, sendID);},800);}
			document.getElementById(sendID).appendChild(gotitPara);
		} // if (bkDivColors[key].toUpperCase() == gameData.goalColor.toUpperCase()) 
		else if (opt == 0) {
			var gotitPara = document.createElement("p");
			gotitPara.style.backgroundColor = "white";
			gotitPara.style.opacity = "0.5";
			gotitPara.style.color = "#3ecf8e";
			gotitPara.style.margin = "auto";
			gotitPara.style.fontSize = "3em"; 
			gotitPara.innerHTML = "Try again"; 
			gotitPara.style.marginTop = "1.5em";
			animatePoints(-5, 1);
			missedCorrect++; 
			if (missedCorrect == 2) {missedCorrect = 0; isGameLost();}
			document.getElementById(sendID).appendChild(gotitPara);
			setTimeout(function() {getNextColors(par, sendID);},800);
		} // else if (opt == 0)
		else if (opt == 1) {missedCorrect = 0;setTimeout(function() {getNextColors(par, sendID);},800);}
		return true;
	} // end function showUnderneathBox(but, par, opt)

	function colorGoalDiv() {
		goalDiv = document.getElementById("goal");
		goalDiv.style.display = "none";
		goalDiv.style.backgroundImage = "none";
		goalDiv.style.backgroundColor = gameData.goalColor;
		goalDiv.style.display = "block";
		return true;
	} // end function colorGoalDiv()

	function createInBetweenColor(color1, color2) {
		var color1hex = "", color2hex = "";
		var hex;
		alpha = 0.5;
		var slice = [];
		slice[0] = Math.floor(color1[0] * alpha + (1-alpha) * color2[0]);
		slice[1] = Math.floor(color1[1] * alpha + (1-alpha) * color2[1]);
		slice[2] = Math.floor(color1[2] * alpha + (1-alpha) * color2[2]);
		hex = getHexFromRGB([slice[0],slice[1],slice[2]])
		return hex;
	} // end function createInBetweenColor(color1, color2)

	function getHexFromRGB(rgb) {
		var slice = [];
		slice.push(parseInt(rgb[0]));
		slice.push(parseInt(rgb[1]));
		slice.push(parseInt(rgb[2]));
		slice[0] = parseInt(slice[0]).toString(16);
		if (slice[0].length == 1) slice[0] = "0" + slice[0];
		slice[1] = parseInt(slice[1]).toString(16);
		if (slice[1].length == 1) slice[1] = "0" + slice[1];
		slice[2] = parseInt(slice[2]).toString(16);
		if (slice[2].length == 1) slice[2] = "0" + slice[2];
		var hex = "#" +  slice[0] + slice[1] + slice[2];
		return hex
	} // end function getHexFromRGB(rgb)



// canvas and letter obj functions ...

	function letterObj(letter, cs, font, size, rotation, correct) {
		this.letter = letter;
		this.cs = cs;
		this.font = font;
		this.size = size;
		this.rotation = rotation;
		this.correct = (!!correct) ? correct : false;
		this.index = null;
	} // end function letterObj(letter, cs, font, size, rotation, correct)

	function createCanvasWithLetters() {
		var messageContainer = document.getElementById("overlayMessageContainer");
		messageContainer.style.display = "none";
		canvas = document.getElementById("canvas1");
		canvas.style.display = "none";
		ctx = canvas.getContext('2d');
		var width = Math.floor(canvas.width);
		var height = Math.floor(canvas.height);
		var fontSz = Math.floor(width*(1/gameData.letters.length));
		if (fontSz < 16) fontSz = 16;
		ctx.font = fontSz+"px Arial";
		ctx.textBaseline = "middle";
		ctx.textAlign = "center";
		ctx.fillStyle = gameData.goalColor;
		var letters = gameData.letters;
		for (var i = 0; i < letters.length; i++) {
			selectedLetters.push(null);
			var breakpoint;
			if (letters.length % 2 == 0) breakpoint = null;
			else if (letters.length %2 != 0) breakpoint = Math.ceil(letters.length/2);
			var angle = Math.random() * (Math.PI/4);
			if (Math.random() < 0.5) angle = 0-angle;
			ctx.translate(canvas.width/2, canvas.height/2);
			yShift = Math.floor(Math.random() * 3);
			if (yShift == 0) yShift = -0.5;
			else if (yShift == 1) yShift = 0;
			else if (yShift == 2) yShift = 0.5;
			if ( !breakpoint ) ctx.translate(-(letters.length/2-i)*fontSz*.75, yShift*fontSz);
			else if (!!breakpoint && (((i+1) < breakpoint) || ((i+1) > breakpoint))) ctx.translate(-(breakpoint-1-i)*fontSz*.75, yShift*fontSz);
			else if (!!breakpoint && ((i+1) == breakpoint)) ctx.translate(0, yShift*fontSz);
			var charCode = letters[i].charCodeAt(0);
			var cs = "";
			if ( (charCode >= 65) && (charCode <= 90) ) cs = "upper";
			else if ( (charCode >= 97) && (charCode <= 122) ) cs = "lower";
			correctLetters.push(new letterObj(letters[i], cs, "Arial", fontSz, angle, true));
			ctx.rotate(angle);
			ctx.fillText(letters[i],0,0);
			ctx.setTransform(1,0,0,1,0,0);
		} // end for (var i = 0; i < letters.length; i++)
		canvas.style.display = "block";
		var direction = ["vertical", "horizontal"];
		var lineList = [];
		for (var i = 0; i < 100; i++) {
			var numOfLines = Math.floor( Math.random() * 2 ) + 2;
			numOfLines = 1;
			var tempArray = [];
			tempArray.push(numOfLines);
			if (i < 50 ) directionTemp = "vertical";
			else if (i >=50 ) directionTemp = "horizontal";
			for (var j = 0; j < numOfLines; j++) {
				var pos;
				if (directionTemp == "vertical") pos = i*(Math.floor(width/50)); 
				else if (directionTemp == "horizontal") pos = (i-50)*(Math.floor(height/50)); 
				tempArray.push([directionTemp, pos]);
			} // for (var j = 0; j < numOfLines; j++)
			lineList.push(tempArray);
		} // for (var i = 0; i < 100; i++)
		imageData = ctx.getImageData(0,0,canvas.width,canvas.height);
		var gameLD = document.getElementById("gameLettersDiv");
		var frag = document.createDocumentFragment();
		for (var i = 0; i < letters.length; i++) {
			var tempLetterChoicesDiv = document.createElement("div");
			tempLetterChoicesDiv.id = "letterChoices" + i;
			tempLetterChoicesDiv.style.width = "100%";
			tempLetterChoicesDiv.style.height = "100%";
			tempLetterChoicesDiv.style.background = "gray";
			tempLetterChoicesDiv.style.display = "none";
			var container = document.getElementById("letterChoicesCont");
			container.appendChild(tempLetterChoicesDiv);
			var tempDivOuter = document.createElement("div");
			tempDivOuter.style.margin = "2px";
			tempDivOuter.style.display = "inline-block";
			tempDivOuter.style.fontSize = "2em";
			tempDivOuter.innerHTML = (i+1);
			tempDivOuter.style.width = (fontSz+2)+"px";
			tempDivOuter.style.height = (fontSz+2)+"px";
			tempDivOuter.style.margin = "2px";
			tempDivOuter.id = "letterBox:"+i;
			tempDivOuter.onclick = function() {selectUnderscore(this, letters);}
			frag.appendChild(tempDivOuter);
			makeLetterDivs(i);
		} // for (var i = 0; i < letters.length; i++)
		gameLD.appendChild(frag);
		gameLD.style.display = "block";
		return true;
	} // end function createCanvasWithLetters()

	function changeColorOfSelectCanvasPixels(hexC) {
		var hexColor = hexC;
		var prevR = parseInt(hexColor[1]+""+hexColor[2], 16);
		var prevG = parseInt(hexColor[3]+""+hexColor[4], 16);
		var prevB = parseInt(hexColor[5]+""+hexColor[6], 16);
	
		hexColor = gameData.goalColor;

		var newR = parseInt(hexColor[1]+""+hexColor[2], 16);
		var newG = parseInt(hexColor[3]+""+hexColor[4], 16);
		var newB = parseInt(hexColor[5]+""+hexColor[6], 16);

		imageData = ctx.getImageData(0,0,canvas.width,canvas.height);
		var pixArr = imageData.data;
		var len = pixArr.length;
	
		for (var i = 0; i < len; i = i + 4) {
			var r = pixArr[i];
			var g = pixArr[i+1];
			var b = pixArr[i+2];
			var a = pixArr[i+3];

			if (((r+5 >= prevR) && (r-5 <= prevR))  && ((g+5 >= prevG) && (g-5 <= prevG)) && ((b+5 >= prevB) && (b-5 <= prevB))) { pixArr[i] = newR; pixArr[i+1] = newG; pixArr[i+2] = newB;}
		}// for (var i = 0; i < len; i = i + 4)
		canvas.style.display = "none";
		ctx.putImageData(imageData, 0, 0);
		canvas.style.display = "block";
		console.log("finished changing canvas colors");
	} // end function changeColorOfSelectCanvasPixels(hexColor)

	function selectUnderscore(el, letters) {
		if (!gameOver) {
			var repeat = false;
			if (!!selectedUnderscore && (selectedUnderscore == el)) {
				for (var i = 0; i < letters.length; i++) document.getElementById("letterChoices"+i).style.display = "none";
				document.getElementById("letterChoicesCont").style.display = "none";
				if (!selectedUnderscore.childNodes[0]) selectedUnderscore.style.borderBottom = "2px solid gray"; 
				else if (!!selectedUnderscore.childNodes[0]) selectedUnderscore.style.borderBottom = "none";
				selectedUnderscore = null;
				repeat = true;
			} // if (!!selectedUnderscore && (selectedUnderscore == el))
			else if (!!selectedUnderscore && !selectedUnderscore.childNodes[0]) selectedUnderscore.style.borderBottom = "2px solid gray"; 
			else if (!!selectedUnderscore && !!selectedUnderscore.childNodes[0]) selectedUnderscore.style.borderBottom = "none"; 
			
			if (!repeat) {
				selectedUnderscore = el;
				el.style.borderBottom="5px solid gray"; 
				showLetterChoices(el.id.split(":")[1], letters.length);
			} // if (!repeat) 
		} // end if (!gameOver) {
		return true;
	} // end function selectUnderscore(el, letters)

	function drawLine() {
		var width = canvas.width;
		if (numberOfLinesDrawnOnCanvas < Math.floor(width * .75)) {
			var ind = Math.floor(Math.random() * (width+1));
			while (!!linesDrawnSoFar[ind]) ind = Math.floor(Math.random() * (width+1));
			linesDrawnSoFar[ind] = 1;
			numberOfLinesDrawnOnCanvas++;
		} else {
			var ind;
			for (var i = 0; i < Math.floor(width); i++) {
				if (!linesDrawnSoFar[i]) {ind = i; break;}
			}
			linesDrawnSoFar[ind] = 1;
			numberOfLinesDrawnOnCanvas++;				
		}
		canvas.style.display = "none";
		ctx.globalCompositeOperation = "exclusion";
		ctx.fillStyle = "white";
		ctx.setTransform(1,0,0,1,0,0);
		end = Math.floor(canvas.height);
		ctx.fillRect(ind,0,1,end);
		canvas.style.display = "block";
		return true;
	} // end function drawLine()

	function showLetterChoices(ind,len) {
		for (var i = 0; i < len; i++) document.getElementById("letterChoices"+i).style.display = "none";
		var el = document.getElementById("letterChoices"+ind);
		el.style.display = "block";
		document.getElementById("letterChoicesCont").style.display = "block";
		return true;
	} // end function showLetterChoices(ind,len)

	function makeLetterDivs(ind) {
		var frag = document.createDocumentFragment();
		var useTheseLetters = [];
		var orderedLetters = [];
		var cl = correctLetters[ind];
		var letterBlock = "";
		if (cl.cs == "upper") letterBlock = similarLettersUpperCase[cl.letter];
		else if (cl.cs == "lower") letterBlock = similarLettersLowerCase[cl.letter];
		letterBlock += cl.letter;
		orderedLetters.push(cl);
		var rotation, usedRotations = {};
		for (var i = 0; i < 5; i++) {
			rotation = Math.random() * (Math.PI/4);
			while (!!usedRotations[rotation] || (rotation == cl.rotation)) rotation = Math.random() * (Math.PI/4);
			usedRotations[rotation] = 1;
			if ( cl.rotation < 0 ) rotation = -rotation;
			orderedLetters.push(new letterObj(letterBlock[Math.floor(Math.random()*letterBlock.length)], cl.cs, cl.font, cl.size, rotation ,false));
		}
		for (var i = 0; i < orderedLetters.length; i++) useTheseLetters.push(null);
		for (var i = 0; i < orderedLetters.length; i++) {
			var newInd = Math.floor(Math.random() * useTheseLetters.length);
			while (useTheseLetters[newInd] != null) newInd = Math.floor(Math.random() * useTheseLetters.length);
			useTheseLetters[newInd] = orderedLetters[i];
			if (i == 0) correctLetters[ind].index = newInd + "";
		}
		for (var i = 0; i  < useTheseLetters.length; i++) {
			angle = useTheseLetters[i].rotation * (180/Math.PI);
			var elP = document.createElement("p");
			elP.style.textAlign = "center";
			elP.style.display = "inline-block";
			elP.style.margin = "auto";
			elP.style.fontFamily = useTheseLetters[i].font;
			elP.style.fontSize = cl.size + "px";
			elP.style.webkitTransform = "rotate("+angle+"deg)";
			elP.style.WebkitTransform = "rotate("+angle+"deg)";
			elP.style.mozTransform = "rotate("+angle+"deg)";
			elP.style.MozTransform = "rotate("+angle+"deg)";
			elP.style.msTransform = "rotate("+angle+"deg)";
			elP.style.MsTransform = "rotate("+angle+"deg)";
			elP.style.oTransform = "rotate("+angle+"deg)";
			elP.style.OTransform = "rotate("+angle+"deg)";
			elP.style.transform = "rotate("+angle+"deg)";
			var t = document.createTextNode(useTheseLetters[i].letter);
			elP.appendChild(t);
			var div = document.createElement("div");
			div.id = "hoopla"+i+":"+i;
			div.style.border = "3px solid ghostwhite";
			div.style.textAlign = "center";
			div.style.width = (cl.size+Math.floor(cl.size/4))+"px";
			div.style.height = (cl.size+Math.floor(cl.size/4))+"px";
			div.style.display = "inline-block";
			div.style.margin = ".5em";
			div.style.lineHeight = (cl.size+Math.floor(cl.size/4))+"px";
			div.style.verticalAlign = "middle";
			div.style.boxShadow = "-2px 1px 2px lightgray";
			div.style.background = "lightblue";
			div.style.borderRadius = "0.4em";
			div.onclick = function(){selectLetter(this);}
			div.appendChild(elP);
			frag.appendChild(div);
		}
		var el = document.getElementById("letterChoices"+ind);
		while (!!el.lastChild) el.removeChild(el.lastChild);
		el.appendChild(frag);
		return true;
	} // end function makeLetterDivs(ind) 

	function selectLetter(letter){
		if (!gameOver) {
			var par = selectedUnderscore;
			var ind = par.id.split(":")[1];
			if (!!par.childNodes[0]) par.removeChild(par.childNodes[0]);
			par.innerHTML = "";
			par.appendChild(letter);
			par.style.padding = "0.5em";
			par.style.borderBottom = "none";
			selectedLetters[ind] = letter;
			letter.onclick = null;
			var ind2 = letter.id + "";
			ind2 = ind2.split(":")[1];
			if (correctLetters[ind].index == ind2) startLetterBorderAnimation(letter, 0);
			else startLetterBorderAnimation(letter, 1);
			if (isGameWon()) {document.getElementById("letterChoicesCont").style.display = "none"; var el = document.getElementById("gameMessage"); el.style.color = "#3ecf8e"; el.innerHTML = "You Won!"; showMenu(document.getElementById('gameMessageDiv')); setTimeout(function() {closeMenu(document.getElementById('gameMessageDiv'))},1500); showLetters(); } // if
		} // if (!gameOver) {
		return true;
	} // end function selectLetter(letter)



// animation functions ...

	function startLetterBorderAnimation(letter, code) {
		letter.style.borderWidth = "1em";
		if (code == 0) letter.style.borderColor = "#3ecf8e";
		else if (code == 1) letter.style.borderColor = "red";
		else if (code == 2) console.log("done once");
		var values = [0,0];
		clearInterval(borderIntervalID);
		borderIntervalID = setInterval(
			function() {
				if (values[1] == -1) {clearInterval(borderIntervalID); var par = letter.parentNode; par.style.width = (letter.offsetWidth + 5) + "px"; par.style.height = (letter.offsetHeight + 5) + "px"; par.style.borderBottom = "2px solid gray"; var preSib = par.previousSibling; while(!!preSib) {preSib.style.width = (letter.offsetWidth + 5) + "px"; preSib.style.height = (letter.offsetHeight + 5) + "px"; preSib = preSib.previousSibling;}; var postSib = par.nextSibling; while(!!postSib) {postSib.style.width = (letter.offsetWidth + 5) + "px"; postSib.style.height = (letter.offsetHeight + 5) + "px"; postSib = postSib.nextSibling;}; return true;}
				else {
					values[1]++;
					values = animateSmallLargeMedium(1, 2, values[1], 2, borderIntervalID);  
					letter.style.borderWidth = (values[0]/4)+"em";
				}
			},22);
		if (code == 0) animatePoints(100,2);
		else if (code == 1) animatePoints(-150,3);
		return true;
	} // end function startLetterBorderAnimation(letter, code)

	function animatePoints(add, code) {
		if (code == 3) {
			isGameLost();
		}

		if (code==2) {
			if (numberOfLinesDrawnOnCanvas < Math.floor(canvas.width * .05))
				add = add;
			else if (numberOfLinesDrawnOnCanvas < Math.floor(canvas.width * .10))
				add = Math.floor(add * .90);
			else if (numberOfLinesDrawnOnCanvas < Math.floor(canvas.width * .15))
				add = Math.floor(add * .85);
			else if (numberOfLinesDrawnOnCanvas < Math.floor(canvas.width * .20))
				add = Math.floor(add * .70);
			else if (numberOfLinesDrawnOnCanvas < Math.floor(canvas.width * .25))
				add = Math.floor(add * .65);
			else if (numberOfLinesDrawnOnCanvas < Math.floor(canvas.width * .30))
				add = Math.floor(add * .50);
			else if (numberOfLinesDrawnOnCanvas < Math.floor(canvas.width * .40))
				add = Math.floor(add * .40);
			else if (numberOfLinesDrawnOnCanvas < Math.floor(canvas.width * .50))
				add = Math.floor(add * .30);
			else if (numberOfLinesDrawnOnCanvas < Math.floor(canvas.width * .60))
				add = Math.floor(add * .20);
			else add = Math.floor(add * .10);
		}
		points += add;
		var time;
		var el = document.getElementById("pointsSpan");
		if (code==0) {el.innerHTML = "+15"; el.style.color = "green";el.style.fontSize = "1em"; time=22;}
		else if (code==1) {el.innerHTML = "-25"; el.style.color = "red";el.style.fontSize = "3em"; time=500;}
		else if (code==2) {el.innerHTML = "+"+add; el.style.color = "green";el.style.fontSize = "1em"; time=22;}
		else if (code==3) {el.innerHTML = "-150"; el.style.color = "red";el.style.fontSize = "3em";  time=500;}
		el.style.fontWeight = "bold";
		var values = [0,0];
		clearInterval(pointsIntervalID);
		pointsIntervalID = setInterval(
			function() {
				if (values[1] == -1) {clearInterval(pointsIntervalID); el.innerHTML = points; if (points >= 0) el.style.color = "orange"; else el.style.color = "red"; el.style.fontWeight = "normal";}
				else {
					values[1]++;
					if ((code == 0) || (code == 2)) {
						values = animateSmallLargeMedium(1, 3, values[1], 10, pointsIntervalID);  
						el.style.fontSize = values[0]+"em";
					}
					else if ((code == 1) || (code == 3)) {
						values = [-1,-1];
						el.style.fontSize = 3+"em";
					}

				}
			},time);
		return true;
	} // end function animatePoints(add, code)

	function animateSmallLargeMedium(origVal, endVal, step, max, intvlID) {
		var sinVal = (-Math.PI/2) + ((3*Math.PI/2) * (step/10));
		var currVal = origVal *   (max * Math.sin(sinVal) + (max+1));
		if (sinVal < Math.PI) return [currVal, step];
		else if (currVal > endVal) return [currVal, step];
		else return [endVal, -1];
	} // end animateSmallLargeMedium(origVal, endVal, step, max, intvlID)



// end of game functions ...

	function isGameWon() {
		var par = document.getElementById("gameLettersDiv");
		var first = par.firstChild;
		var numLetts = 0;
		while(!!first) {if (!!first.firstChild && !!first.firstChild.id) {var id = first.firstChild.id + ""; if (id[0]=="h") numLetts++;} first = first.nextSibling;}
		if (numLetts == correctLetters.length) {
			first = par.firstChild;
			var ind = 0;
			var numCorr = 0;
			while(!!first) {var id = first.firstChild.id + ""; if ( parseInt(id.split(":")[1]) == correctLetters[ind].index ) numCorr++; first = first.nextSibling; ind++;}
			if (numCorr == correctLetters.length) {gameOver = true; return true;}
		} // if (numLetts == correctLetters.length)
		return false;
	} // end function isGameWon() 

	function isGameLost() {
		numXs++;
		var par, ind;
		if (numXs < 3) {par = document.getElementById("xbox1"); ind = numXs;}
		else if (numXs >= 3) {par = document.getElementById("xbox2"); ind = numXs - 2;}
		var first = par.firstChild;
		for (var i = 0; i < ind-1; i++) first = first.nextSibling;
		first.style.color = "red";
		first.style.fontWeight = "bold";
		first.style.fontSize = "1.5em";
		if (numXs == 4) {gameOver = true; document.getElementById("letterChoicesCont").style.display = "none"; var el = document.getElementById("gameMessage"); el.style.color = "red"; el.innerHTML = "Game Over"; showMenu(document.getElementById('gameMessageDiv')); setTimeout(function() {closeMenu(document.getElementById('gameMessageDiv'))},1500); showLetters(); return true; }
		return false;
	} // end function isGameLost()

	function showLetters() {
		drawLine();
		if (numberOfLinesDrawnOnCanvas < canvas.width) showLettersTimeoutID = setTimeout(function() {showLetters()}, 100);
		return true;
	} // end function showLetters()



// general purpose app functions ...
	
	function showMenu(el) {
		var id = el.id + "";
		if (id == "signupDiv") {
			document.getElementById("signupForm").reset();
			document.getElementById("emailInput").nextSibling.style.visibility = "hidden";
			document.getElementById("cellInput").nextSibling.style.visibility = "hidden";
			document.getElementById("displaynameInput").nextSibling.style.visibility = "hidden";
			document.getElementById("password1Input").nextSibling.style.visibility = "hidden";
			document.getElementById("password2Input").nextSibling.style.visibility = "hidden";
		}
		el.style.height = "95%";
		el.style.marginTop="3em"; 
		el.style.opacity="1";
		return true;
	} // end function showMenu(el)

	function closeMenu(el) {
		el.style.opacity = "0";
		el.style.marginTop = "-2em";
		if (el.id == "menuDiv") animateMenu(document.getElementById("menuPara"),1);
		setTimeout(function() {el.style.height = "0";}, 600);
		return true;
	} // end function closeMenu(el)

	function animateMenu(para, code) {
		if (code == 0) {
			para.style.backgroundColor = "#8e3ecf";
			para.style.color = "white";
			first = para.firstChild;
			while (!!first) {first.style.paddingRight = "1em"; first = first.nextSibling;}
		} // if (code == 0)
		if (code == 1) {
			para.style.backgroundColor = "white";
			para.style.color = "gray";
			first = para.firstChild;
			while (!!first) {first.style.paddingRight = "0em"; first = first.nextSibling;}
		} // if (code == 1)	
		return true;
	} // end function animateMenu(para, code)

	function checkForImportantMessage() {
		var id = document.getElementById("versionNo").value;
		var csrfTok = document.querySelector("meta[name='csrf-token']").getAttribute("content");
		var route = "/message?version="+id;
		xhttp.open("GET", route);
		xhttp.setRequestHeader('X-CSRF-Token', csrfTok)
		xhttp.onreadystatechange = function() {
			if (this.readyState == 4 && this.status == 200) {
				var message = this.responseText + "";
				if (message != "") {
					var el = document.getElementById('importantMessageSpan');
					el.innerHTML = message;
					el = document.getElementById('importantMessageDiv');
					el.style.height = "95%";
					el.style.marginTop="3em"; 
					el.style.opacity="1";
				}
				return true;
			} // end if
		} // end onreadystatechange
		xhttp.send();
		return true;
	} // end function checkForImportantMessage()

	function validateEmail(inp) {
		var errorEl = document.getElementById("emailErrorMessage");
		var test = inp.value + "";
		var noAts = 0;
		var noWhiteSpaces = 0;
		var errorMessage = "";
		var isValid = true;
		var len = test.length;
		for (var i = 0; i < len; i++) {
			if (test[i] == "@") 
				noAts++;
			else if ((i < len-1) && ((test[i] == "\n") || (test[i] == "\r") || (test[i] == "\t") || (test[i] == "\v") || (test[i] == "\f") || (test[i] == " ")))
				{noWhiteSpaces++; errorMessage = "please remove any spaces or other whitespace characters";}
		} // for (var i = 0; i < len; i++)

		if ((noAts != 1) || (noWhiteSpaces != 0)) { isValid = false; }
		else if (test.split("@")[1].length < 2) { isValid = false; }
		else if (test.split("@")[1].length >= 2) { 
			if ( (test.split("@")[1].split(".").length < 2) || (test.split("@")[1].split(".")[1] == "") ) isValid = false; 
		}
		
		if (isValid) {
			var patt = /[^A-z0-9@_.]/g;
			var val = patt.test(test);
			if (val) {isValid = false; errorMessage = "invalid characters present";}
		}
		if (isValid) {inp.nextSibling.style.visibility = "visible"; errorEl.innerHTML = "";}
		else {inp.nextSibling.style.visibility = "hidden"; errorEl.innerHTML = errorMessage;}
	} // end function validateEmail()

	function validateCellNo(inp) {
		var dis = document.getElementById("displaynameInput");
		var errorEl = document.getElementById("cellNoErrorMessage");
		var hid = document.getElementById("numberInput");
		inp.blur();
		hid.focus();
		var hidValue = hid.value;
		dis.value = hidValue;
		
		hid.focus();
	} // end function validateCell()

	function validateDisplayName(inp) {
		var test = inp.value + "";
	} // end function validateDisplayName()

	function validatePassword() {
		var el1 = document.getElementById("password1Input");
		var el2 = document.getElementById("password2Input");
		var errorEl1 = document.getElementById("password1ErrorMessage");
		var errorEl2 = document.getElementById("password2ErrorMessage");
		var test1 = el1.value + "";
		var test2 = el2.value + "";
		if (test1.length < 8) {
			errorEl1.innerHTML = "password length must be at least 8 characters";
			errorEl2.innerHTML = "";
			el1.nextSibling.style.visibility = "hidden";
			el2.nextSibling.style.visibility = "hidden";
		} else if ((test2.length >= test1.length) && (el1.value != el2.value)) {
			errorEl1.innerHTML = "passwords do not match";
			errorEl2.innerHTML = "passwords do not match";
			el1.nextSibling.style.visibility = "hidden";
			el2.nextSibling.style.visibility = "hidden";
		} else if (el1.value == el2.value) {
			errorEl1.innerHTML = "";
			errorEl2.innerHTML = "";
			el1.nextSibling.style.visibility = "visible";
			el2.nextSibling.style.visibility = "visible";
		} else {
			errorEl1.innerHTML = "";
			errorEl2.innerHTML = "";
			el1.nextSibling.style.visibility = "hidden";
			el2.nextSibling.style.visibility = "hidden";
		}

	} // end function validatePassword()


// legacy functions ...

	function setupTimer() {
		if (!!window.Worker) {
			if (!webWorker) {webWorker = new window.Worker("timer.js"); webWorker.onmessage = function(evt) {updateTimer(evt.data);} }
		} // end if (!!window.Worker)
		else {
			clearInterval(intervalID);
			intervalID = setInterval(function() {updateTimer(null)},333);
		} // end else
		return true;
	} // end function setupTimer()

	function updateTimer(time) {
		timerEl = document.getElementById("timer");
		var time = time;
		if (!time) {
			var d = new Date();
			time = d.getTime();
		} // end if (!time)
		if (!startTime) startTime = time;
		if (time < lastTime) alert("Don't cheat!");
		else {
			var timeDiff = time - startTime;
			var timeDiffInSec = Math.floor(timeDiff / 1000);
			var minutes = Math.floor(timeDiffInSec / 60);
			var seconds = timeDiffInSec % 60;
			var displayTime = minutes.toString() + ":" + ((seconds < 10) ? ("0" + seconds.toString()) : seconds.toString());
			if (minutes != previousMinute) { previousMinute = minutes; loseStars(1);  }
			timerEl.style.display = "none";
			timerEl.innerHTML = displayTime;
			timerEl.style.display = "block";
		} // end else
		return true;
	} // end function updateTimer(time)

	</script>

</html>