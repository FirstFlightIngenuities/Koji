<!DOCTYPE html>
<html style="height:100%">
<title></title>
<head>
</head>
<body style="width:100%;height:100%; padding: 0px;margin: 0">
<h1 style="width:100%;height:1em; padding:0.1em;text-align: center;background-color: gray;font-size:4em; margin-top: 0px; color:white; box-shadow: 6px 6px 6px #aaaaaa; z-index:4">KO<span style="color:blue">J</span><span style="color:green">I</span></h1>
<div id="root" style="position:relative;margin: auto; width:100%;height:100%;">
	<div style="position:relative;width:100%; height:40%;overflow: hidden; font-family: verdana, geneva, sans-serif; ">
		<div id="overlayMessageContainer" style="position:absolute;width:100%;height:100%;background-color:white;opacity:0.75;display:none;text-align:center"><p id="overlayMessageSpan" style="margin-top:3em;font-size:4em;font-family: verdana, geneva, sans-serif"></p></div>
		<div style="display:inline-block;width:50%;text-align:center; font-size: 1.5em;border-bottom: 1px solid gray">This is the color you have to match</div><div style="display:inline-block;width:50%;text-align:center; font-size: 1.5em;border-bottom: 1px solid gray;">This is your guess</div>
		<div id="timer" style="position:absolute; width:4em; padding:0.5em; background-color:lightgray; opacity:0.75; text-align:center; font-size:3em; margin-top:0px; left: 50%; margin-left: -2.5em"></div>
		<div id="answer" style="width:50%;height:90%; min-height: 350px; display: inline-block; background-color: #eef0f6;font-size: 0"></div><div id="guess" style="width:50%;height:90%; min-height: 350px; display: inline-block; background-color: #eef0f6;background-image: url('transparent_background.jpg');box-shadow: inset 2px 2px 10px #aaaaaa;font-size:0;transition: border 0.5s;-webkit-transition: border 0.5s"></div>
	</div>
	<div id="endsPaletteContainer" style="position:absolute;width:100%;height:100%;background-color:ghostwhite;z-index:2;display:none; text-align:center; font-size: 1.2em">
		<p>These are the choices for the ends: (Once you choose a color for both ends, a gradient of colors will be created, and you can choose a color from that gradient)</p>
		<div id="palette" style="width:100%;text-align: center"></div>
	</div>
	<div style="position:relative;width:100%;overflow: hidden; font-family: verdana, geneva, sans-serif; ">
		<div style="width:100%;text-align: center; font-size:2em;overflow:hidden; white-space:nowrap">
			<p style="display:inline-block; width:30%"><span>Earned: </span><span id="stars_count">0</span><img style="vertical-align:middle" src="star.png"></p>
			<p style="display:inline-block;width:30%">Stars</p>
			<p style="display:inline-block; width:30%"><span>Remaining: </span><span id="stars_remaining_count">12</span><img style="vertical-align:middle" src="star.png"></p>
		</div>
		<div style="clear: both;text-align:center"><button style="font-size:2em;padding:.5em;margin-top: 0.2em" onclick="setupNewGame()">Start a new game</button></div>
		<div id="choices" style="width:100%;height:175px;overflow-x:scroll;white-space: nowrap;clear: both; padding:0.5em; "></div>
		<div id="ends" style="position:relative;width:100%;text-align:center;z-index:3; margin-top:0.2em">
			<div id="end1" style="width:150px;height:150px;border:1px solid gray;display:inline-block; font-size:2em" onclick="makeSelectedDiv(this)"><p>End 1</p></div>
			<div id="end2" style="width:150px;height:150px;border:1px solid gray;display:inline-block;font-size:2em;margin-left:10em" onclick="makeSelectedDiv(this)"><p>End 2</p></div>
		</div>
	</div>

</div>
</body>
<script>
		answerRes = null;
		selectedDiv = null;
		gradientSteps = null;
		endsColored = {};
		webWorker = null;
		startTime = null;
		lastTime = 0;
		intervalID = null;
		timeoutID = null;
		totalStarCount = 0;
		starsRemaining = 12;
		previousMinute = 0;
		xhttp = new XMLHttpRequest();
		
		function setupNewGame() {
			answerRes = null;
			selectedDiv = null;
			gradientSteps = null;
			endsColored = {};
			if (!!webWorker) webWorker.terminate();
			webWorker = null;
			startTime = null;
			lastTime = 0;
			clearInterval(intervalID);
			intervalID = null;
			clearTimeout(timeoutID);
			timeoutID = null;
			totalStarCount = 0;
			starsRemaining = 12;
			previousMinute = 0;
			var end1 = document.getElementById("end1");
			end1.style.backgroundColor = "white";
			var end2 = document.getElementById("end2");
			end2.style.backgroundColor = "white";
			var choices = document.getElementById("choices");
			while(!!choices.firstChild) choices.removeChild(choices.firstChild);
			var palette = document.getElementById("palette");
			while(!!palette.firstChild) palette.removeChild(palette.firstChild);
			var answer = document.getElementById("answer");
			answer.style.backgroundColor = "#eef0f6";
			var guess = document.getElementById("guess");
			guess.style.backgroundImage = "url('transparent_background.jpg')";
			var timer = document.getElementById("timer");
			var stars_remaining = document.getElementById("stars_remaining_count");  
			stars_remaining.innerHTML = "12";
			var stars_earned = document.getElementById("stars_count");  
			stars_earned.innerHTML = "0";
			var messageContainer = document.getElementById("overlayMessageContainer"); 
			var messageSpan = document.getElementById("overlayMessageSpan");
			messageSpan.innerHTML = "";
			messageContainer.style.display = "none";
			timer.style.display = "none";
			timer.innerHTML = "0:00";
			timer.style.display = "block";
			xhttp.abort();
			getGame();
		}

		function getGame() {
			var csrfTok = document.querySelector("meta[name='csrf-token']").getAttribute("content");
			xhttp.open("POST", "/games");
			xhttp.setRequestHeader('X-CSRF-Token', csrfTok)
			xhttp.onreadystatechange = function() {
				if (this.readyState == 4 && this.status == 200) {
					answerRes = JSON.parse(this.responseText);
					gradientSteps = answerRes.gradientSteps;
					console.log("the answer palette choices are:");
					console.log(answerRes.answer.ends);
					colorAnswerDiv(answerRes);
					createPalette(answerRes);
					setupTimer();
				} // end if
			} // end onreadystatechange
			xhttp.send();
		} // end function getGame()

		function addColorsToPage(colorsArr) {
			var choices = document.getElementById("choices");
			var frag = document.createDocumentFragment();
			for (var i = 0; i < colorsArr.length; i++) {
				var divTemp = document.createElement('div');
				divTemp.style.width = "150px";
				divTemp.style.height = "150px";
				divTemp.style.border = "1px solid gray";
				divTemp.style.display = "inline-block";
				divTemp.style.marginRight = "0.2em";
				divTemp.style.backgroundColor = colorsArr[i];
				divTemp.id = colorsArr[i];
				divTemp.onclick = function() {checkGuess(this);};
				frag.appendChild(divTemp);
			}
			choices.style.display = "none";
			while(!!choices.firstChild) choices.removeChild(choices.firstChild);
			
			choices.appendChild(frag);
			choices.style.display = "block";
			return true;
		}

		function createPalette(ans) {
			var palette = document.getElementById("palette");
			//colorsArr = ans.mixedUpEnds;
			colorsArr = ans.organizedEnds;
			var frag = document.createDocumentFragment();
			for (var i = 0; i < colorsArr.length; i++) {
				var divTemp = document.createElement('div');
				divTemp.style.width = "100px";
				divTemp.style.height = "100px";
				divTemp.style.border = "1px solid gray";
				divTemp.style.display = "inline-block";
				divTemp.style.marginRight = "0.2em";
				divTemp.style.backgroundColor = colorsArr[i];
				divTemp.id = colorsArr[i];
				divTemp.onclick = function() {selectColorForEnd(this);}
				frag.appendChild(divTemp);
			}
			palette.style.display = "none";
			while(!!palette.firstChild) palette.removeChild(palette.firstChild);
			palette.appendChild(frag);
			palette.style.display = "block";
		}

		function colorAnswerDiv(ans) {
			answerDiv = document.getElementById("answer");
			answerDiv.style.display = "none";
			answerDiv.style.backgroundColor = ans.answer.selectedColor;
			answerDiv.style.display = "inline-block";
		}

		function makeSelectedDiv(divS) {
			var container = document.getElementById("endsPaletteContainer");
			container.style.display = "block";
			if (!selectedDiv) {
				selectedDiv = divS;
				divS.style.border = "5px solid black";
			}
			else if (selectedDiv === divS) {
				selectedDiv = null;
				divS.style.border = "1px solid gray";
				container.style.display = "none";
			}
			else {
				selectedDiv.style.border = "1px solid gray";
				selectedDiv = divS;
				divS.style.border = "5px solid black";
			}
			
		} // end function makeSelectedDiv(divS)

		function selectColorForEnd(choice) {
			var container = document.getElementById("endsPaletteContainer");
			var bkColor = choice.id;
			if (!!selectedDiv && starsRemaining >= 2) {
				selectedDiv.style.backgroundColor = bkColor;
				selectedDiv.style.border = "1px solid gray";
				endsColored[selectedDiv.id] = true;
				selectedDiv = null;
				if (endsColored["end1"] && endsColored["end2"]) createGradient(gradientSteps);
				container.style.display = "none";
				loseStars(2);
				return true;
			}
			container.style.display = "none";
			return false;
		} // end function selectColorForEnd(choice)

		function createGradient(steps) {
			console.log("started test");
			end1 = document.getElementById("end1");
			end2 = document.getElementById("end2");
			color1 = getRGBComponents(end1.style.backgroundColor);
			color2 = getRGBComponents(end2.style.backgroundColor);
			color1hex = getHexFromRGB(color1);
			color2hex = getHexFromRGB(color2);
			console.log(color1);
			console.log(getHexFromRGB(color1));
			if (  ((answerRes.answer.ends[0].toUpperCase() == color1hex.toUpperCase()) && (answerRes.answer.ends[1].toUpperCase() == color2hex.toUpperCase())) || ((answerRes.answer.ends[1].toUpperCase() == color1hex.toUpperCase() ) && (answerRes.answer.ends[0].toUpperCase() == color2hex.toUpperCase())) ) {
				if (color1hex.toUpperCase() == answerRes.answer.gradient[0].toUpperCase())
					return addColorsToPage(answerRes.answer.gradient);
				else
					return addColorsToPage(answerRes.answer.gradient.reverse());
			} // end if
			else {
				gradient = [];
				alpha = 0.0;
				for (var i = 0; i < steps; i++) {
					var slice = [];
					alpha += (1.0/steps);
					slice[0] = Math.floor(color1[0] * alpha + (1-alpha) * color2[0]);
					slice[1] = Math.floor(color1[1] * alpha + (1-alpha) * color2[1]);
					slice[2] = Math.floor(color1[2] * alpha + (1-alpha) * color2[2]);
					
					var hex = getHexFromRGB([slice[0],slice[1],slice[2]])
					gradient.push(hex);
				} // end for loop
				return addColorsToPage(gradient.reverse());
			} // end else
		} // end function createGradient(steps)

		function getRGBComponents(color) {
			color = color.replace("rgb(","");
			color = color.replace(")","");
			var colorArr = color.split(",");
			return colorArr;
		} // end function getRGBComponents(color)

		function getHexFromRGB(rgb) {
				var slice = [];
				slice.push(parseInt(rgb[0]));
				slice.push(parseInt(rgb[1]));
				slice.push(parseInt(rgb[2]));
				slice[0] = parseInt(slice[0]).toString(16);
				if (slice[0].length == 1) slice[0] = "0" + slice[0];
				slice[1] = parseInt(slice[1]).toString(16);
				if (slice[1].length == 1) slice[1] = "0" + slice[1];
				slice[2] = parseInt(slice[2]).toString(16);
				if (slice[2].length == 1) slice[2] = "0" + slice[2];
				var hex = "#" +  slice[0] + slice[1] + slice[2];
				return hex
		} // end function getHexFromRGB(rgb)


		function checkGuess(col) {
			color = col.id;
			var messageContainer = document.getElementById("overlayMessageContainer");
			var messageSpan = document.getElementById("overlayMessageSpan");
			guessDiv = document.getElementById("guess");
			guessDiv.style.backgroundColor = color
			guessDiv.style.backgroundImage = "none";
			guessDiv.style.boxShadow = "none";
			answer = answerRes.answer.selectedColor;
			console.log("this is answer: " + answer + " and this is your guess: "+ color)
			if (answer.toUpperCase() === color.toUpperCase()) {if (!!webWorker) webWorker.terminate(); else clearInterval(intervalID); messageContainer.style.display = "none"; messageSpan.innerHTML = "YOU WON!!!"; messageContainer.style.display = "block";}
			return true;
		} // end function checkGuess(col)
	
		function setupTimer() {
			if (!!window.Worker) {
				if (!webWorker) {webWorker = new window.Worker("timer.js"); webWorker.onmessage = function(evt) {updateTimer(evt.data);} }
			} // end if (!!window.Worker)
			else {
				clearInterval(intervalID);
				intervalID = setInterval(function() {updateTimer(null)},333);
			} // end else
		} // end function setupTimer()

		function updateTimer(time) {
			timerEl = document.getElementById("timer");
			var time = time;
			if (!time) {
				var d = new Date();
				time = d.getTime();
			} // end if (!time)
			if (!startTime) startTime = time;
			if (time < lastTime) alert("Don't cheat!");
			else {
				var timeDiff = time - startTime;
				var timeDiffInSec = Math.floor(timeDiff / 1000);
				var minutes = Math.floor(timeDiffInSec / 60);
				var seconds = timeDiffInSec % 60;
				var displayTime = minutes.toString() + ":" + ((seconds < 10) ? ("0" + seconds.toString()) : seconds.toString());
				if (minutes != previousMinute) { previousMinute = minutes; loseStars(1);  }
				timerEl.style.display = "none";
				timerEl.innerHTML = displayTime;
				timerEl.style.display = "block";
			} // end else
		} // end function updateTimer(time)

		function loseStars(decreaseBy) {
			var stars_remaining = document.getElementById("stars_remaining_count"); 
			starsRemaining -= decreaseBy; 
			stars_remaining.innerHTML = starsRemaining;
			if (decreaseBy == 1) {
				var messageContainer = document.getElementById("overlayMessageContainer"); 
				var messageSpan = document.getElementById("overlayMessageSpan"); 
				if (starsRemaining < 1) {if (!!webWorker) webWorker.terminate(); clearInterval(intervalID);clearTimeout(timeoutID);messageSpan.innerHTML="Game Over";messageContainer.style.display="block";}
				else {
					messageSpan.innerHTML = "Just lost a star"; 
					messageContainer.style.display="block"; 
					setTimeout(function(){messageSpan.innerHTML = ""; messageContainer.style.display = "none";},2000);
				} // end else
			} // end if (decreaseBy == 1)
			return true;
		} // end function loseStars()

	</script>	
</html>
